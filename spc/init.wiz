//------------------------------------------------
// init.wiz
//------------------------------------------------
import "spc";
import "banks";

namespace init {
  in zeropage{
    extern var dp_head @ 0x0000 : [u8;256];
  }

  inline func clear_dp (dp_tail : u8 in x) {
    do {
      *(x as *u8) = a;     // 4cy
      x--;            // 2cy
    } while !zero;   // 2/4 cy
  }


  let dsp_flag_initial = (spc.dsp.DATA_FLAGS_RESET | spc.dsp.DATA_FLAGS_MUTE | spc.dsp.DATA_FLAGS_ECHO_DISABLE);
  let end_data = 0xff;
  let mvol = 127;
  const initial_data : [u8] = [
    spc.dsp.ADDRESS_FLAGS,                    dsp_flag_initial,
    spc.dsp.ADDRESS_MAIN_VOLUME_L,            mvol,
    spc.dsp.ADDRESS_MAIN_VOLUME_R,            mvol,
    spc.dsp.ADDRESS_ECHO_VOLUME_L,            0,
    spc.dsp.ADDRESS_ECHO_VOLUME_R,            0,
    spc.dsp.ADDRESS_KEY_ON,                   0,
    spc.dsp.ADDRESS_KEY_OFF,                  0,
    spc.dsp.ADDRESS_ECHO_ENABLE,              0,
    spc.dsp.ADDRESS_NOISE_ENABLE,             0,
    spc.dsp.ADDRESS_PITCH_MODULATION_ENABLE,  0,
    spc.dsp.ADDRESS_ECHO_DELAY,               0,
    spc.dsp.ADDRESS_SOURCE_DIRECTORY_PAGE,    0,
    spc.dsp.ADDRESS_ECHO_BUFFER_PAGE,         0,

    end_data
  ];

  // require: x=0, dp=0
  inline func clear_dsp() {
    a = initial_data[x];
    while !negative {
      y = a;
      a = initial_data[++x];
      spc.dsp.data_and_address = ya;
      x++;
      a = initial_data[x];
    };
  }
}
